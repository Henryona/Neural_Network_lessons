'''
Обучение перцептрона: задача из курса "Нейронные сети" расположенного в
образовательной системе stepik.org.
Входные данные:
фруктовый сад, в котором есть груши и "не груши" (другие фрукты).
___________________________________________
№ наблю- | желтизна| симметрич-|  это   |
  дения  | фрукта  |  ность    | груша? |
___________________________________________
    1.   |    1    |    0.3    |   да   |
    2.   |   0.4   |    0.5    |   да   |
    3.   |   0.7   |    0.8    |  нет   |

Задание:
Пусть у нас есть перцептрон с весами (0, 0) и смещением 0. 
Обучите его на приведённых данных различать груши и не груши (пока не надо обучать до сходимости: просто примените обучающее правило последовательно по одному разу на каждом примере, всего у вас получится 3 последовательных применения обучающего правила). 

Напишите в ответе через запятую получившиеся у вас смещение, вес для желтизны фрукта и вес для его симметричности (только итоговые, не надо писать результаты каждого шага).
'''
import numpy as np

def trueFacts(ex): 
    if ex[1] == 1 and ex[2] == 0.3:
        return 1
    elif ex[1] == 0.4 and ex[2] == 0.5:
        return 1
    elif ex[1] == 0.7 and ex[2] == 0.8:
        return 0

def predicts(experiment, offset): # вычисление предсказанного значения
    resultOffset = experiment.dot(offset[0]) # произведение векторов: 
          # покоординатное умножение и суммирование результатов
    if resultOffset > 0:
        return 1
    else:
        return 0

def firstIter(number_of_exps, examples):
    offset = np.zeros((1, number_of_exps)) # начальные веса и смещение перцептрона
    for e in examples:
        if predicts(e, offset) != trueFacts(e):
            if predicts(e, offset) == 0:
                # все плохо - прибавляем
                offset = offset + e
            else:
                # все ок - отнимаем
                offset = offset - e

    print(f"смещение равно: {np.round(offset[0][0])}, \nвес для желтизны: "
          f"{np.round(offset[0][1], 2)} \n"
          f"вес для симметричности: {np.round(offset[0][2])}")
    print(f"Ответ на задание:")
    print(*np.round(offset[0], 2), sep=", ")


examples = np.array( [[1, 1, 0.3], [1, 0.4, 0.5], [1, 0.7, 0.8]] ) # наблюдения
number_of_exps = 3

firstIter(number_of_exps, examples)









